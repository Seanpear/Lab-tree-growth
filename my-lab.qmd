---
title: "Tree Growth Lab"
Author: "Sean Pearson"
format: 
  html:
    output-dir: .
---

## Question 1: Read in the Minnesota tree growth dataset.

```{r}
library(tidyverse)

# Read the tree growth dataset
trees <- read_csv("data/tree_dat.csv")

# Glimpse the structure
glimpse(trees)
```

This dataset contains 131,386 rows and 8 columns. Each row contains a different type of annual measurement for an individual tree in a specific strand.

## Question 2: How many records have been made in stand 1?

```{r}
# Filter by standID == 1 (this is numeric, so no quotes)
stand1_records <- trees %>%
  filter(standID == 1)

# Count number of records
nrow(stand1_records)
```

979 records have been made in stand 1.

## Question 3: How many records of the Abies balsamea and Pinus strobus species have been made?

```{r}
# Filter for both species 
species_records <- trees %>%
  filter(species %in% c("ABBA", "PIST"))

# Count total records
nrow(species_records)

# Optional: See how many of each
species_records %>%
  count(species)
```

There are 13,033 records for ABBA and 4188 for PIST. 

## Question 4: How many trees are older then 200 years old in the last year of the dataset?

```{r}
# Step 1: Find the last year in the dataset
latest_year <- max(trees$year)

# Step 2: Filter for trees in that year and older than 200
old_trees <- trees %>%
  filter(year == latest_year, age > 200)

# Step 3: Count how many records
nrow(old_trees)
```

7 trees are older than 200 years of age.

## Question 5: What is the oldest tree in the dataset? 

```{r}
# Use slice_max to get the row(s) with the highest age value
oldest_tree <- trees %>%
  slice_max(age, n = 1)

oldest_tree
```

The oldest tree is 269 years old.

## Question 6: Find the oldest 5 trees recorded in 2001 

```{r}
# Use slice_max to get the top 5 oldest trees in 2001
oldest_2001 <- trees %>%
  filter(year == 2001) %>%
  slice_max(order_by = age, n = 5)

oldest_2001
```

The 5 oldest trees in 2001 are as follows. A 263 year old PIRE, 259 year old PIRE, 212 year old FRNI, 206 year old FRNI, 206 year old FRNI.

## Question 7:Using slice_sample, how many trees are in a 30% sample of those recorded in 2002?

```{r}
# Step 1: Filter for trees recorded in 2002
trees_2002 <- trees %>%
  filter(year == 2002)

# Step 2: Take a 30% random sample of that data
sample_30 <- trees_2002 %>%
  slice_sample(prop = 0.3)

# Step 3: Count how many rows are in the sample
nrow(sample_30)
```

There are 687 trees in this 30% sample.

## Question 8: Filter all trees in stand 5 in 2007. Sort this subset by descending radius at breast height (rad_ib) and use slice_head() to get the top three trees. Report the tree IDs

```{r}
# Step 1: Filter for standID 5 and year 2007
stand5_2007 <- trees %>%
  filter(standID == 5, year == 2007)

# Step 2: Sort by descending radius inside bark (rad_ib), then get top 3
top_rad_trees <- stand5_2007 %>%
  arrange(desc(rad_ib)) %>%
  slice_head(n = 3)

# Step 3: Display the tree IDs
top_rad_trees$treeID
```

The three tree ids are 128, 157, and 135. 

## Question 9: Question 9: Reduce your full data.frame to [treeID, stand, year, and radius at breast height]. Filter to only those in stand 3 with records from 2007, and use slice_min to pull the smallest three trees meaured that year.

```{r}
# Step 1: Select relevant columns
reduced_trees <- trees %>%
  select(treeID, stand, year, rad_ib)

# Step 2: Filter for stand "B3" in 2007
stand_B3_2007 <- reduced_trees %>%
  filter(stand == "B3", year == 2007)

# Step 3: Get the 3 trees with the smallest radius
smallest_trees <- stand_B3_2007 %>%
  slice_min(order_by = rad_ib, n = 3)

smallest_trees
```

Tree id 479 with a radius of 45.25mm, tree id 458 with a radius of 48.60mm, tree id 445 with a radius of 49.90mm.

## Question 10: Remove the stand column and use glimpse

```{r}
# Use select with a minus sign to remove the stand column
trees_no_stand <- trees %>%
  select(-stand)

# Glimpse the result
glimpse(trees_no_stand)
```

## Question 11: Look at the help document for dplyr::select and examine the “Overview of selection features”. Identify an option (there are multiple) that would help select all columns with the string “ID” in the name. Using glimpse to view the remaining dataset

```{r}
# Use select with contains() helper
id_columns <- trees %>%
  select(contains("ID"))

# Glimpse the result
glimpse(id_columns)
```

## Question 12: Select columns containing "ID" or "stand"

```{r}
# Use matches() 
stand_id_cols <- trees %>%
  select(matches("ID|stand"))

# Glimpse the result
glimpse(stand_id_cols)
```

## Question 13: Looking back at the data dictionary, rename rad_inc and inc to include _[unit] in the name. Unlike earlier options, be sure that this renaming is permanent, and stays with your data.frame (e.g. <-). Use glimpse to view your new data.frame.

```{r}
# Permanently rename columns and save to a new data.frame
trees_renamed <- trees %>%
  rename(
    rad_ib_mm = rad_ib,
    inc_mm = inc
  )

# View the new structure
glimpse(trees_renamed)
```

## Question 14: Compute DBH and basal area, and find mean BA of POTR in 2007

```{r}
# Step 1: Add DBH and BA to dataset using mutate
trees_with_ba <- trees %>%
  mutate(
    rad_ib_cm = rad_ib / 10,                  
    DBH_cm = rad_ib_cm * 2,                   
    BA_m2 = 0.00007854 * (DBH_cm^2)           
  )

# Step 2: Filter for species POTR in 2007
potr_2007 <- trees_with_ba %>%
  filter(species == "POTR", year == 2007)

# Step 3: Calculate the mean basal area
mean(potr_2007$BA_m2, na.rm = TRUE)
```

The mean BA of POTR in 2007 is 0.0369661m^2. 

## Question 15: Lets say for the sake of our study, trees are not established until they are 5 years of age. Use if_else to add a boolean column to our dataset called established that is TRUE if the age is greater then 5 and FALSE if less then or equal to five. Once added, use count (see ?count) to determine how many records are from estabilshed trees? 

```{r}
# Step 1: Add established column
trees_established <- trees %>%
  mutate(established = if_else(age > 5, TRUE, FALSE))

# Step 2: Count how many records are from established trees
trees_established %>%
  count(established)
```

122,503 of the records are from established trees.

## Question 16: Use mutate and case_when to add a new column to you data.frame that classifies each tree into the proper DBH_class. Once done, limit your dataset to the year 2007 and report the number of each class with count. 

```{r}
# Step 1: Add DBH_class column using case_when
trees_classified <- trees %>%
  mutate(
    rad_ib_cm = rad_ib / 10,
    DBH_cm = rad_ib_cm * 2,
    DBH_class = case_when(
      DBH_cm <= 10 ~ "seedling",
      DBH_cm > 10 & DBH_cm <= 20 ~ "sapling",
      DBH_cm > 20 & DBH_cm <= 40 ~ "intermediate",
      DBH_cm > 40 & DBH_cm <= 60 ~ "mature",
      DBH_cm > 60 ~ "old-growth",
      TRUE ~ "unknown"
    )
  )

# Step 2: Filter to year 2007 and count classes
trees_classified %>%
  filter(year == 2007) %>%
  count(DBH_class)
```

Seedling: 252 trees, Sapling: 1,565 trees, Intermediate: 461 trees, Mature: 12 trees, Old-Growth: 1 tree. 

## Question 17:  Compute the mean DBH (in cm) and standard deviation of DBH (in cm) for all trees in 2007. Explain the values you found and their statistical meaning.

```{r}
# Calculate DBH in cm and summarize for year 2007
dbh_stats_2007 <- trees %>%
  mutate(DBH_cm = (rad_ib / 10) * 2) %>%
  filter(year == 2007) %>%
  summarise(
    mean_DBH = mean(DBH_cm, na.rm = TRUE),
    sd_DBH = sd(DBH_cm, na.rm = TRUE)
  )

dbh_stats_2007
```

In 2007, the DBH of trees was 16.09351cm and the standard deviation was 6.138643cm. This means that trees had an average diameter of 16 cm and a standard deviation of 6, which indicates moderate variability in tree size.

## Question 18: Per-species mean age in 2003, and oldest 3 species

```{r}
# Step 1: Filter for 2003 and calculate mean age per species
species_age_2003 <- trees %>%
  filter(year == 2003) %>%
  group_by(species) %>%
  summarise(mean_age = mean(age, na.rm = TRUE)) %>%
  arrange(desc(mean_age))  

# Step 2: Get top 3 species
top3_oldest_species <- species_age_2003 %>%
  slice_head(n = 3)

top3_oldest_species
```

THOC: 126.64 years of age, FRNI: 83.08 years of age, PIST: 73.29 years of age.

## Question 19: In a single summarize call, find the number of unique years with records in the data set along with the first and last year recorded?

```{r}
year_summary <- trees %>%
  summarise(
    num_years = n_distinct(year),
    first_year = min(year, na.rm = TRUE),
    last_year = max(year, na.rm = TRUE)
  )

year_summary
```

The dataset contains 111 unique years ranging from 1897 to 2007. 

## Question 20: Find stands with the most unique years recorded

```{r}
# Step 1: Count unique years per stand
stand_years <- trees %>%
  group_by(stand) %>%
  summarise(num_years = n_distinct(year)) %>%
  ungroup()

# Step 2: Get all stands tied for the maximum number of years
top_stands <- stand_years %>%
  slice_max(order_by = num_years, with_ties = TRUE)

top_stands
```

The strands with the highest number of unique years are A1, D1, D2, D3, and F1. They all contain 111 unique years. 

## Final Question: Use a combination of dplyr verbs to compute these values and report the 3 species with the fastest growth, and the 3 species with the slowest growth. (** You will need to use either lag() or diff() in your compuation. You can learn more about each in the Help pages) 

```{r}
library(dplyr)

# Step 1: Convert rad_ib to DBH in cm
trees_growth <- trees %>%
  mutate(DBH_cm = (rad_ib / 10) * 2)

# Step 2: Arrange by tree and year, then compute per-year growth using lag()
trees_growth <- trees_growth %>%
  arrange(treeID, year) %>%
  group_by(treeID) %>%
  mutate(
    annual_growth = DBH_cm - lag(DBH_cm)  # yearly growth = current - previous year
  )

# Step 3: Filter to trees with at least 10 growth measurements
long_lived_trees <- trees_growth %>%
  group_by(treeID) %>%
  filter(n() >= 10)

# Step 4: Compute average and SD of annual growth per species
species_growth_stats <- long_lived_trees %>%
  group_by(species) %>%
  summarise(
    mean_growth = mean(annual_growth, na.rm = TRUE),
    sd_growth = sd(annual_growth, na.rm = TRUE),
    n_trees = n_distinct(treeID)
  ) %>%
  arrange(desc(mean_growth))  # Sort from fastest to slowest

# Step 5: Get top 3 fastest and slowest species
fastest_species <- species_growth_stats %>%
  slice_head(n = 3)

slowest_species <- species_growth_stats %>%
  slice_tail(n = 3)

fastest_species
slowest_species
```

Fastest growing species: PIRE, POTR, PIBA 
Slowest growing species: QURU, THOC, LALA
